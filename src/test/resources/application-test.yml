server:
  port: ${PORT:9095}
logging:
  level:
    com.ss.challenge.votesessionmanagerapi: INFO
    org.springframework: INFO
    org.apache.kafka: INFO
  pattern:
    console: '%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} app=${spring.application.name}
            %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint}
            %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} M=%M
            %m%n}'
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
  health:
    db:
      enabled: true
spring:
  application:
    name: vote-session-manager-api
  devtools:
    add-properties: false
    restart:
      log-condition-evaluation-delta:  false
  datasource:
    url: jdbc:h2:mem:test;MODE=Oracle;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: VOTEMANAGER
    password: test1234
    driver-class-name: org.h2.Driver
    jpa:
      hibernate:
        naming:
          physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        ddl-auto: create-drop
        dialect: org.hibernate.dialect.H2Dialect
        properties:
          hibernate:
            dialect: org.hibernate.dialect.H2Dialect
      show-sql: true
      generate-ddl: true
      platform: org.hibernate.dialect.H2Dialect
      database: h2
  flyway:
    enabled: false

  kafka:
    consumer:
      group-id: ${spring.application.name}
      bootstrap-servers: ${spring.embedded.kafka.brokers}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      max-poll-records: 100
      auto-offset-reset: earliest
      properties:
        schema.registry.url: mock://unused
        specific.avro.reader: true
      listener:
        ack-mode: BATCH
        poll-timeout: 10000
    producer:
      acks: 1
      bootstrap-servers: ${spring.embedded.kafka.brokers}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: mock://unused
    topics:
      result-vote-session: result-vote-session
    client-id: ${spring.application.name}
swagger:
  message:
    welcome: Vote Session Manager API
    description: API para gestão de sessões de votos
    version: 1.0
    contact:
      name: Fernando meireles
      email: fernando.meireles.filho@gmail.com
vote-session:
  api-cpf-generator:
    url: https://gerador.app/api
    token: Bearer BbjJ1DLBc9b6Qx8cmNggwKQCBlFQRVWO3q0HxFND