/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package vote.result;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ResultVoteSession extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6417606384290148514L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ResultVoteSession\",\"namespace\":\"vote.result\",\"fields\":[{\"name\":\"id_session\",\"type\":[\"null\",\"long\"],\"doc\":\"ID of session voted\",\"default\":null},{\"name\":\"subject\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"subject voted in session\",\"default\":null},{\"name\":\"negative_vote\",\"type\":[\"null\",\"long\"],\"doc\":\"negatives votes in session\",\"default\":null},{\"name\":\"positive_vote\",\"type\":[\"null\",\"long\"],\"doc\":\"positive votes in session\",\"default\":null},{\"name\":\"result_vote_session\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Result of vote session\",\"default\":null},{\"name\":\"date_vote_session\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Date execution vote session\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ResultVoteSession> ENCODER =
      new BinaryMessageEncoder<ResultVoteSession>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ResultVoteSession> DECODER =
      new BinaryMessageDecoder<ResultVoteSession>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ResultVoteSession> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ResultVoteSession> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ResultVoteSession> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ResultVoteSession>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ResultVoteSession to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ResultVoteSession from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ResultVoteSession instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ResultVoteSession fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** ID of session voted */
  @Deprecated public java.lang.Long id_session;
  /** subject voted in session */
  @Deprecated public java.lang.String subject;
  /** negatives votes in session */
  @Deprecated public java.lang.Long negative_vote;
  /** positive votes in session */
  @Deprecated public java.lang.Long positive_vote;
  /** Result of vote session */
  @Deprecated public java.lang.String result_vote_session;
  /** Date execution vote session */
  @Deprecated public java.lang.String date_vote_session;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ResultVoteSession() {}

  /**
   * All-args constructor.
   * @param id_session ID of session voted
   * @param subject subject voted in session
   * @param negative_vote negatives votes in session
   * @param positive_vote positive votes in session
   * @param result_vote_session Result of vote session
   * @param date_vote_session Date execution vote session
   */
  public ResultVoteSession(java.lang.Long id_session, java.lang.String subject, java.lang.Long negative_vote, java.lang.Long positive_vote, java.lang.String result_vote_session, java.lang.String date_vote_session) {
    this.id_session = id_session;
    this.subject = subject;
    this.negative_vote = negative_vote;
    this.positive_vote = positive_vote;
    this.result_vote_session = result_vote_session;
    this.date_vote_session = date_vote_session;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id_session;
    case 1: return subject;
    case 2: return negative_vote;
    case 3: return positive_vote;
    case 4: return result_vote_session;
    case 5: return date_vote_session;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id_session = (java.lang.Long)value$; break;
    case 1: subject = value$ != null ? value$.toString() : null; break;
    case 2: negative_vote = (java.lang.Long)value$; break;
    case 3: positive_vote = (java.lang.Long)value$; break;
    case 4: result_vote_session = value$ != null ? value$.toString() : null; break;
    case 5: date_vote_session = value$ != null ? value$.toString() : null; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id_session' field.
   * @return ID of session voted
   */
  public java.lang.Long getIdSession() {
    return id_session;
  }


  /**
   * Sets the value of the 'id_session' field.
   * ID of session voted
   * @param value the value to set.
   */
  public void setIdSession(java.lang.Long value) {
    this.id_session = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return subject voted in session
   */
  public java.lang.String getSubject() {
    return subject;
  }


  /**
   * Sets the value of the 'subject' field.
   * subject voted in session
   * @param value the value to set.
   */
  public void setSubject(java.lang.String value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'negative_vote' field.
   * @return negatives votes in session
   */
  public java.lang.Long getNegativeVote() {
    return negative_vote;
  }


  /**
   * Sets the value of the 'negative_vote' field.
   * negatives votes in session
   * @param value the value to set.
   */
  public void setNegativeVote(java.lang.Long value) {
    this.negative_vote = value;
  }

  /**
   * Gets the value of the 'positive_vote' field.
   * @return positive votes in session
   */
  public java.lang.Long getPositiveVote() {
    return positive_vote;
  }


  /**
   * Sets the value of the 'positive_vote' field.
   * positive votes in session
   * @param value the value to set.
   */
  public void setPositiveVote(java.lang.Long value) {
    this.positive_vote = value;
  }

  /**
   * Gets the value of the 'result_vote_session' field.
   * @return Result of vote session
   */
  public java.lang.String getResultVoteSession() {
    return result_vote_session;
  }


  /**
   * Sets the value of the 'result_vote_session' field.
   * Result of vote session
   * @param value the value to set.
   */
  public void setResultVoteSession(java.lang.String value) {
    this.result_vote_session = value;
  }

  /**
   * Gets the value of the 'date_vote_session' field.
   * @return Date execution vote session
   */
  public java.lang.String getDateVoteSession() {
    return date_vote_session;
  }


  /**
   * Sets the value of the 'date_vote_session' field.
   * Date execution vote session
   * @param value the value to set.
   */
  public void setDateVoteSession(java.lang.String value) {
    this.date_vote_session = value;
  }

  /**
   * Creates a new ResultVoteSession RecordBuilder.
   * @return A new ResultVoteSession RecordBuilder
   */
  public static vote.result.ResultVoteSession.Builder newBuilder() {
    return new vote.result.ResultVoteSession.Builder();
  }

  /**
   * Creates a new ResultVoteSession RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ResultVoteSession RecordBuilder
   */
  public static vote.result.ResultVoteSession.Builder newBuilder(vote.result.ResultVoteSession.Builder other) {
    if (other == null) {
      return new vote.result.ResultVoteSession.Builder();
    } else {
      return new vote.result.ResultVoteSession.Builder(other);
    }
  }

  /**
   * Creates a new ResultVoteSession RecordBuilder by copying an existing ResultVoteSession instance.
   * @param other The existing instance to copy.
   * @return A new ResultVoteSession RecordBuilder
   */
  public static vote.result.ResultVoteSession.Builder newBuilder(vote.result.ResultVoteSession other) {
    if (other == null) {
      return new vote.result.ResultVoteSession.Builder();
    } else {
      return new vote.result.ResultVoteSession.Builder(other);
    }
  }

  /**
   * RecordBuilder for ResultVoteSession instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ResultVoteSession>
    implements org.apache.avro.data.RecordBuilder<ResultVoteSession> {

    /** ID of session voted */
    private java.lang.Long id_session;
    /** subject voted in session */
    private java.lang.String subject;
    /** negatives votes in session */
    private java.lang.Long negative_vote;
    /** positive votes in session */
    private java.lang.Long positive_vote;
    /** Result of vote session */
    private java.lang.String result_vote_session;
    /** Date execution vote session */
    private java.lang.String date_vote_session;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(vote.result.ResultVoteSession.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id_session)) {
        this.id_session = data().deepCopy(fields()[0].schema(), other.id_session);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.subject)) {
        this.subject = data().deepCopy(fields()[1].schema(), other.subject);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.negative_vote)) {
        this.negative_vote = data().deepCopy(fields()[2].schema(), other.negative_vote);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.positive_vote)) {
        this.positive_vote = data().deepCopy(fields()[3].schema(), other.positive_vote);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.result_vote_session)) {
        this.result_vote_session = data().deepCopy(fields()[4].schema(), other.result_vote_session);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.date_vote_session)) {
        this.date_vote_session = data().deepCopy(fields()[5].schema(), other.date_vote_session);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ResultVoteSession instance
     * @param other The existing instance to copy.
     */
    private Builder(vote.result.ResultVoteSession other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id_session)) {
        this.id_session = data().deepCopy(fields()[0].schema(), other.id_session);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subject)) {
        this.subject = data().deepCopy(fields()[1].schema(), other.subject);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.negative_vote)) {
        this.negative_vote = data().deepCopy(fields()[2].schema(), other.negative_vote);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.positive_vote)) {
        this.positive_vote = data().deepCopy(fields()[3].schema(), other.positive_vote);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.result_vote_session)) {
        this.result_vote_session = data().deepCopy(fields()[4].schema(), other.result_vote_session);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.date_vote_session)) {
        this.date_vote_session = data().deepCopy(fields()[5].schema(), other.date_vote_session);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id_session' field.
      * ID of session voted
      * @return The value.
      */
    public java.lang.Long getIdSession() {
      return id_session;
    }


    /**
      * Sets the value of the 'id_session' field.
      * ID of session voted
      * @param value The value of 'id_session'.
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder setIdSession(java.lang.Long value) {
      validate(fields()[0], value);
      this.id_session = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id_session' field has been set.
      * ID of session voted
      * @return True if the 'id_session' field has been set, false otherwise.
      */
    public boolean hasIdSession() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id_session' field.
      * ID of session voted
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder clearIdSession() {
      id_session = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * subject voted in session
      * @return The value.
      */
    public java.lang.String getSubject() {
      return subject;
    }


    /**
      * Sets the value of the 'subject' field.
      * subject voted in session
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder setSubject(java.lang.String value) {
      validate(fields()[1], value);
      this.subject = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * subject voted in session
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subject' field.
      * subject voted in session
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'negative_vote' field.
      * negatives votes in session
      * @return The value.
      */
    public java.lang.Long getNegativeVote() {
      return negative_vote;
    }


    /**
      * Sets the value of the 'negative_vote' field.
      * negatives votes in session
      * @param value The value of 'negative_vote'.
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder setNegativeVote(java.lang.Long value) {
      validate(fields()[2], value);
      this.negative_vote = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'negative_vote' field has been set.
      * negatives votes in session
      * @return True if the 'negative_vote' field has been set, false otherwise.
      */
    public boolean hasNegativeVote() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'negative_vote' field.
      * negatives votes in session
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder clearNegativeVote() {
      negative_vote = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'positive_vote' field.
      * positive votes in session
      * @return The value.
      */
    public java.lang.Long getPositiveVote() {
      return positive_vote;
    }


    /**
      * Sets the value of the 'positive_vote' field.
      * positive votes in session
      * @param value The value of 'positive_vote'.
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder setPositiveVote(java.lang.Long value) {
      validate(fields()[3], value);
      this.positive_vote = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'positive_vote' field has been set.
      * positive votes in session
      * @return True if the 'positive_vote' field has been set, false otherwise.
      */
    public boolean hasPositiveVote() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'positive_vote' field.
      * positive votes in session
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder clearPositiveVote() {
      positive_vote = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'result_vote_session' field.
      * Result of vote session
      * @return The value.
      */
    public java.lang.String getResultVoteSession() {
      return result_vote_session;
    }


    /**
      * Sets the value of the 'result_vote_session' field.
      * Result of vote session
      * @param value The value of 'result_vote_session'.
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder setResultVoteSession(java.lang.String value) {
      validate(fields()[4], value);
      this.result_vote_session = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'result_vote_session' field has been set.
      * Result of vote session
      * @return True if the 'result_vote_session' field has been set, false otherwise.
      */
    public boolean hasResultVoteSession() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'result_vote_session' field.
      * Result of vote session
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder clearResultVoteSession() {
      result_vote_session = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'date_vote_session' field.
      * Date execution vote session
      * @return The value.
      */
    public java.lang.String getDateVoteSession() {
      return date_vote_session;
    }


    /**
      * Sets the value of the 'date_vote_session' field.
      * Date execution vote session
      * @param value The value of 'date_vote_session'.
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder setDateVoteSession(java.lang.String value) {
      validate(fields()[5], value);
      this.date_vote_session = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'date_vote_session' field has been set.
      * Date execution vote session
      * @return True if the 'date_vote_session' field has been set, false otherwise.
      */
    public boolean hasDateVoteSession() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'date_vote_session' field.
      * Date execution vote session
      * @return This builder.
      */
    public vote.result.ResultVoteSession.Builder clearDateVoteSession() {
      date_vote_session = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ResultVoteSession build() {
      try {
        ResultVoteSession record = new ResultVoteSession();
        record.id_session = fieldSetFlags()[0] ? this.id_session : (java.lang.Long) defaultValue(fields()[0]);
        record.subject = fieldSetFlags()[1] ? this.subject : (java.lang.String) defaultValue(fields()[1]);
        record.negative_vote = fieldSetFlags()[2] ? this.negative_vote : (java.lang.Long) defaultValue(fields()[2]);
        record.positive_vote = fieldSetFlags()[3] ? this.positive_vote : (java.lang.Long) defaultValue(fields()[3]);
        record.result_vote_session = fieldSetFlags()[4] ? this.result_vote_session : (java.lang.String) defaultValue(fields()[4]);
        record.date_vote_session = fieldSetFlags()[5] ? this.date_vote_session : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ResultVoteSession>
    WRITER$ = (org.apache.avro.io.DatumWriter<ResultVoteSession>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ResultVoteSession>
    READER$ = (org.apache.avro.io.DatumReader<ResultVoteSession>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id_session == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.id_session);
    }

    if (this.subject == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.subject);
    }

    if (this.negative_vote == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.negative_vote);
    }

    if (this.positive_vote == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.positive_vote);
    }

    if (this.result_vote_session == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.result_vote_session);
    }

    if (this.date_vote_session == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.date_vote_session);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id_session = null;
      } else {
        this.id_session = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.subject = null;
      } else {
        this.subject = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.negative_vote = null;
      } else {
        this.negative_vote = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.positive_vote = null;
      } else {
        this.positive_vote = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.result_vote_session = null;
      } else {
        this.result_vote_session = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.date_vote_session = null;
      } else {
        this.date_vote_session = in.readString();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id_session = null;
          } else {
            this.id_session = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.subject = null;
          } else {
            this.subject = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.negative_vote = null;
          } else {
            this.negative_vote = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.positive_vote = null;
          } else {
            this.positive_vote = in.readLong();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.result_vote_session = null;
          } else {
            this.result_vote_session = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.date_vote_session = null;
          } else {
            this.date_vote_session = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










